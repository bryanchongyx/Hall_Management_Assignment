

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class BookingSystem extends JFrame {
    private List<Hall> halls;
    private List<Booking> bookings;
    private User currentUser;

    public BookingSystem(User user) {
        this.currentUser = user;
        this.halls = new ArrayList<>();
        this.bookings = new ArrayList<>();
        initializeUI();
    }

    private void initializeUI() {
        setTitle("Hall Booking System");
        setSize(600, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(null);

        JButton bookHallButton = new JButton("Book a Hall");
        bookHallButton.setBounds(50, 50, 150, 30);
        add(bookHallButton);

        JButton viewBookingsButton = new JButton("View Bookings");
        viewBookingsButton.setBounds(50, 100, 150, 30);
        add(viewBookingsButton);

        JButton cancelBookingButton = new JButton("Cancel Booking");
        cancelBookingButton.setBounds(50, 150, 150, 30);
        add(cancelBookingButton);

        JButton raiseIssueButton = new JButton("Raise an Issue");
        raiseIssueButton.setBounds(50, 200, 150, 30);
        add(raiseIssueButton);

        bookHallButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showBookingUI();
            }
        });

        viewBookingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showViewBookingsUI();
            }
        });

        cancelBookingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showCancelBookingUI();
            }
        });

        raiseIssueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showRaiseIssueUI();
            }
        });

        setVisible(true);
    }

    private void showBookingUI() {
        JFrame bookingFrame = new JFrame("Book a Hall");
        bookingFrame.setSize(400, 300);
        bookingFrame.setLayout(null);

        JButton auditoriumButton = new JButton("Auditorium");
        auditoriumButton.setBounds(50, 50, 150, 30);
        bookingFrame.add(auditoriumButton);

        JButton meetingRoomButton = new JButton("Meeting Room");
        meetingRoomButton.setBounds(50, 100, 150, 30);
        bookingFrame.add(meetingRoomButton);

        JButton banquetHallButton = new JButton("Banquet Hall");
        banquetHallButton.setBounds(50, 150, 150, 30);
        bookingFrame.add(banquetHallButton);

        auditoriumButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleBooking("Auditorium");
            }
        });

        meetingRoomButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleBooking("Meeting Room");
            }
        });

        banquetHallButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleBooking("Banquet Hall");
            }
        });

        bookingFrame.setVisible(true);
    }

    private void handleBooking(String hallType) {
        String date = JOptionPane.showInputDialog("Enter Date (YYYY-MM-DD):");
        String time = JOptionPane.showInputDialog("Enter Time (HH:MM):");

        double amount = calculateAmount(hallType);
        Booking newBooking = new Booking(currentUser, hallType, date, time);
        bookings.add(newBooking);

        JOptionPane.showMessageDialog(null, "Booking confirmed for " + hallType + " on " + date + " at " + time + ". Payment: $" + amount);

        showPaymentUI();
    }

    private void showPaymentUI() {
        JOptionPane.showMessageDialog(this, "Payment UI Placeholder");
        // Implement actual payment logic here
    }

    private void showViewBookingsUI() {
        StringBuilder bookingDetails = new StringBuilder("Your Bookings:\n");
        for (Booking booking : bookings) {
            bookingDetails.append("Hall: ").append(booking.getHallType())
                    .append(", Date: ").append(booking.getDate())
                    .append(", Time: ").append(booking.getTime())
                    .append("\n");
        }
        JOptionPane.showMessageDialog(this, bookingDetails.toString());
    }

    private void showCancelBookingUI() {
        String bookingToCancel = JOptionPane.showInputDialog("Enter the date of the booking to cancel (YYYY-MM-DD):");
        boolean bookingFound = false;
        for (Booking booking : bookings) {
            if (booking.getDate().equals(bookingToCancel)) {
                bookings.remove(booking);
                bookingFound = true;
                JOptionPane.showMessageDialog(this, "Booking for " + bookingToCancel + " has been canceled.");
                break;
            }
        }
        if (!bookingFound) {
            JOptionPane.showMessageDialog(this, "No booking found for " + bookingToCancel);
        }
    }

    private void showRaiseIssueUI() {
        JFrame issueFrame = new JFrame("Raise an Issue");
        issueFrame.setSize(400, 300);
        issueFrame.setLayout(null);

        JButton acIssueButton = new JButton("Fix the Air Condition");
        acIssueButton.setBounds(50, 50, 200, 30);
        issueFrame.add(acIssueButton);

        JButton lightsIssueButton = new JButton("Lights Not Working");
        lightsIssueButton.setBounds(50, 100, 200, 30);
        issueFrame.add(lightsIssueButton);

        JButton seatsIssueButton = new JButton("Less No of Seats");
        seatsIssueButton.setBounds(50, 150, 200, 30);
        issueFrame.add(seatsIssueButton);

        acIssueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleIssue("Fix the Air Condition");
            }
        });

        lightsIssueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleIssue("Lights Not Working");
            }
        });

        seatsIssueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleIssue("Less No of Seats");
            }
        });

        issueFrame.setVisible(true);
    }

    private void handleIssue(String issueDescription) {
        String venue = JOptionPane.showInputDialog("Enter the venue where the issue is:");
        JOptionPane.showMessageDialog(this, "Issue reported: " + issueDescription + " at " + venue);
        // Implement issue handling logic here
    }

    private double calculateAmount(String hallType) {
        // Example pricing logic
        switch (hallType) {
            case "Auditorium":
                return 100.0;
            case "Meeting Room":
                return 50.0;
            case "Banquet Hall":
                return 75.0;
            default:
                return 0.0;
        }
    }

    public static void main(String[] args) {
        User defaultUser = new User("username", "password", "email", "phone", "customer");
        BookingSystem bookingSystem = new BookingSystem(defaultUser);
        bookingSystem.setVisible(true);
    }
}
